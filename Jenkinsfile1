pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node18'  // Matches Jenkins Global Tool Configuration
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                echo "Workspace cleaned successfully"
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Giri9608/Book-My-Show.git'
                sh 'ls -la'
            }
        }

        stage('Verify Tools') {
            steps {
                sh '''
                echo "Verifying tool versions..."
                java -version
                node -v
                npm -v
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' 
                    $SCANNER_HOME/bin/sonar-scanner \
                      -Dsonar.projectName=BMS \
                      -Dsonar.projectKey=BMS
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                cd bookmyshow-app
                echo "Listing directory contents before installation..."
                ls -la

                if [ -f package.json ]; then
                    echo "Removing node_modules and package-lock.json..."
                    rm -rf node_modules package-lock.json
                    echo "Installing dependencies..."
                    npm install
                else
                    echo "Error: package.json not found in bookmyshow-app!"
                    exit 1
                fi

                echo "Listing directory contents after installation..."
                ls -la
                '''
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableAssembly --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs . --skip-files dependency-check-report.xml > trivyfs.txt'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh ''' 
                        echo "Building Docker image..."
                        docker build -t giri8608/bms:latest -f bookmyshow-app/Dockerfile bookmyshow-app

                        echo "Pushing Docker image to Docker Hub..."
                        docker push giri8608/bms:latest
                        '''
                    }
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                sh ''' 
                echo "Stopping and removing old container..."
                docker stop bms || true
                docker rm bms || true

                echo "Cleaning up unused Docker images..."
                docker image prune -f

                echo "Running new container on port 3000..."
                docker run -d --restart=always --name bms -p 3000:3000 giri8608/bms:latest

                echo "Waiting for the app to start..."
                sleep 5

                echo "Checking container status..."
                docker ps -a

                echo "Performing health check..."
                curl -f http://localhost:3000 || echo "App not responding"

                echo "Fetching container logs..."
                docker logs bms
                '''
            }
        }
    }

    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>",
                to: 'giridharan9608@gmail.com',
                attachmentsPattern: 'trivyfs.txt'  // Attach Trivy scan result
        }
    }
}

